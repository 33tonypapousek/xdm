{
  "meta:license": [
    "Copyright 2018 Adobe Systems Incorporated. All rights reserved.",
    "This work is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license",
    "you may not use this file except in compliance with the License. You may obtain a copy",
    "of the License at https://creativecommons.org/licenses/by/4.0/"
  ],
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "https://ns.adobe.com/experience/offer-management/filter-expression",
  "meta:abstract": false,
  "meta:extensible": true,
  "type": "object",
  "title": "Filter Expression Tree",
  "description": "Represents an abstract syntax tree comprised of various node types. The expression is used to evaluate a match against a XDM object tree, where the result is a boolean value - matches: yes or no - or another XDM tree structure.",
  "definitions": {
    "node-type": {
      "type": "string",
      "title": "Node Type",
      "description": "Indicates the type of a node",
      "enum": [
        "fnApply",
        "fnCreate",
        "literal",
        "fieldLookup",
        "select",
        "varDecl",
        "varRef"
      ],
      "meta:enum": {
        "fnApply": "Apply a function to the evaluation context. The valency or arity of the function varies with the function-type. Functions can be boolean-valued or produce scalar values and vectors.",
        "fnCreate": "Create a function.",
        "literal": "Prodcue a value from a literal",
        "fieldLookup": "Produce a value from an object by accessing one of its fields",
        "select": "Produce a list from a list of inputs by evaluating a projection and a selection expression for every element of the input list.",
        "varDecl": "Sub-structure of the select expression that binds a variable to the elements matching a projection and a selection expression. The value is made available for reference via a variable name to other sub-select expressions",
        "varRef": "Iterate over a list of values by referencing a variable name that denotes a list element previously qualified (evaluated in preceeding variable varDecl)."
      }
    },
    "function-type": {
      "type": "string",
      "title": "Function Identifier",
      "description": "Function Identifier. See allowed values for details.",
      "enum": [
        "and",
        "or",
        "=",
        "!=",
        ">",
        ">=",
        "<=",
        "<",
        "in",
        "notIn",
        "isNull",
        "isNotNull",
        "all",
        "some",
        "equals",
        "notEquals",
        "modelInstances"
      ],
      "meta:enum": {
        "and": "An n-ary AND function. Map a list of boolean values to a single boolean value. Produces 'true' if and only if all input values are 'true', otherwise produces 'false'.",
        "or": "An n-ary OR function. Map a list of boolean values to a single boolean value. Produces 'true' if and only if any of the input values is 'true', otherwise produces 'false'.",
        "=": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and they are  equal and returns false otherwise. The second value is coerced to the type of the first value before applying the != operator.",
        "!=": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and they are not equal and returns alse otherwise. The second value is coerced to the type of the first value before applying the != operator.",
        ">": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and the first one is greater than the second and returns false otherwise. The second value is coerced to the type of the first value before applying the operator.",
        ">=": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and the first one is greater than or equals the second and returns false otherwise. The second value is coerced to the type of the first value before applying the operator.",
        "<=": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and the first one is less than or equals the second and returns false otherwise. The second value is coerced to the type of the first value before applying the operator.",
        "<": "Produce a boolean value from two input values by comparing them and returning true if neither value is null and the first one is less than the second and returns false otherwise. The second value is coerced to the type of the first value before applying the operator.",
        "in": "Produce a boolean value from a scalar and a vector input value. If the scalar is eqaul to one or more of the vector values the evaluation results in the boolean value 'true' and 'false' otherwise. The second value is coerced to a list type of the first value before applying the equality check operator.",
        "notIn": "Produce a boolean value from a scalar and a vector input value. If the scalar is equal to none of the vector values the evaluation results in the boolean value 'true' and 'false' otherwise. The second value is coerced to a list type of the first value before applying the equality check operator.",
        "isNull": "Produce a boolean value from a scalar input value. If the scalar is null, the evaluation results in the boolean value 'true' and 'false' otherwise",
        "isNotNull": "Produce a boolean value from a scalar input value. If the scalar is not null, the evaluation results in the boolean value 'true' and 'false' otherwise",
        "all": "The universal quantifier of first order logic. Produce a boolean value from a list of values by applying an n-ary function to each item and returning true if for all of the items the n-ary function evaluates to true",
        "some": "The existential quantifier of first order logic. Produce a boolean value from a list of  values by applying an n-ary function to each item and returning true if for some of the items the na-ray function evaluates to true",
        "equals": "Produce a boolean value from two string values by comparing them and returning true if they are equal and false otherwise, an additional argument specifies if compariosn case-sensitive or not. The second value is coerced to the type of the first value before applying the equals operator.",
        "notEqualsTo": "Produce a boolean value from two string values by comparing them and returning true if they are not equal and false otherwise, an additional argument specifies if compariosn case-sensitive or not. The second value is coerced to the type of the first value before applying the equals operator.",
        "modelInstances": "Reference the set of all instances of a given model"
      }
    },
    "literal-type": {
      "type": "string",
      "title": "LIteral Type Identifier",
      "description": "LIteral Type Identifier: String, Number, Integer, Boolean, Date, DateTime",
      "enum": [
        "String",
        "Number",
        "Integer",
        "Boolean",
        "List",
        "XDMObject"
      ],
      "meta:enum": {
        "String": "A string literal",
        "Number": "A number literal",
        "Integer": "An integer literal",
        "Boolean": "A boolean literal",
        "List": "An array of literals",
        "XDMObject": "A sting denoting a reference of an XDM schema"
      }
    },

    "function-application-content": {
      "type": "object",
      "title": "N-ary function application",
      "description": "Apply an n-ary function (functor) that maps a value (scalar, object, list, tree) to anothe value, by recursively applying its child nodes to the objects and then taking the results as parameters to itself.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "$ref": "#/definitions/node-type"
            },
            "fnName": {
              "$ref": "#/definitions/function-type"
            }
          },
          "required": ["nodeType", "fnName"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/function-content-and"
            },
            {
              "$ref": "#/definitions/function-content-or"
            },
            {
              "$ref": "#/definitions/function-content-equals-native"
            },
            {
              "$ref": "#/definitions/function-content-not-equals-native"
            },
            {
              "$ref": "#/definitions/function-content-greater-than-native"
            },
            {
              "$ref": "#/definitions/function-content-greater-than-or-equal-native"
            },
            {
              "$ref": "#/definitions/function-content-less-than-or-equal-native"
            },
            {
              "$ref": "#/definitions/function-content-less-than-native"
            },
            {
              "$ref": "#/definitions/function-content-in"
            },
            {
              "$ref": "#/definitions/function-content-not-in"
            },
            {
              "$ref": "#/definitions/function-content-null"
            },
            {
              "$ref": "#/definitions/function-content-not-null"
            },
            {
              "$ref": "#/definitions/function-content-all"
            },
            {
              "$ref": "#/definitions/function-content-some"
            },
            {
              "$ref": "#/definitions/function-content-equals-string"
            },
            {
              "$ref": "#/definitions/function-content-not-equals-string"
            },
            {
              "$ref": "#/definitions/function-content-model-instances"
            }
          ]
        }
      ]
    },
    "function-content-and": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "and"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-or": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "or"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-equals-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "="
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-not-equals-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "!="
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-greater-than-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": ">"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-greater-than-or-equal-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": ">="
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-less-than-or-equal-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "<="
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-less-than-native": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "<"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-in": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "in"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-not-in": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "notIn"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "function-content-null": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "isNull"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1,
          "maxItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-not-null": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "isNotNull"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1,
          "maxItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-equals-string": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "equanls"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 3
        }
      },
      "additionalProperties": false
    },
    "function-content-not-equals-string": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "notEquals"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 3
        }
      },
      "additionalProperties": false
    },
    "function-content-all": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "all"
        },
        "varName": {
          "type": "string",
          "pattern": "^[_A-Za-z0-9]+$"
        },
        "range" : {
          "$ref": "#/definitions/quantifier-range-content",
          "description": "The valence of the predicate is 1 for this all-quantifier and must reference excatly one variable whose domain is a list of values. The predicate evaluates to a boolean based on the boolean value of the parameter function applied to each of the range list values. If the function applied to every list element results in 'true' the overall predicate evaluates to 'true' otherwise it evaluates to false."
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1,
          "maxItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-some": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "some"
        },
        "varName": {
          "type": "string",
          "pattern": "^[_A-Za-z0-9]+$"
        },
        "range" : {
          "$ref": "#/definitions/quantifier-range-content",
          "description": "The valence of the predicate is 1 for this exist-quantifier and must reference excatly one variable whose domain is a list of values. The predicate evaluates to a boolean based on the boolean value of the parameter function applied to each of the range list values. . If the function applied to at least one list element results in 'true' the overall predicate evaluates to 'true' otherwise it evaluates to false."
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1,
          "maxItems": 1
        }
      },
      "additionalProperties": false
    },
    "quantifier-range-content": {
      "type": "object",
      "title": "Predicate Range",
      "description": "The predicate's variable range.",
      "oneOf": [
        {
          "$ref": "#/definitions/field-lookup-content"
        },
        {
          "$ref": "#/definitions/literal-list-content"
        },
        {
          "$ref": "#/definitions/tree-node-reference-content"
        }
      ]
    },

    "function-creation-content": {
      "type": "object",
      "title": "Function creation",
      "description": "Creates a function with a set of variables as parameters.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "fnCreate"
            },
            "params" : {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "varName": {
                    "type": "string"
                  }
                },
                "required": ["varName"]
              },
              "minItems": 1
            },
            "body": {
              "$ref": "#/definitions/function-application-content"
            }
          },
          "required": ["nodeType", "params", "body"]
        }
      ]
    },

    "field-lookup-content": {
      "type": "object",
      "title": "Field accessor",
      "description": "An epression that is applied on an object and returns the value of the field specified in the expression",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "fieldLookup"
            },
            "fieldName": {
              "type": "string"
            },
            "object": {
              "$ref": "#/definitions/node-content"
            }
          },
          "required": ["nodeType", "fieldName"],
          "additionalProperties": false
        }
      ]
    },

    "literal-content": {
      "type": "object",
      "title": "Literal",
      "description": "A literal produces the value that is stated in the 'value' property.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "literal"
            },
            "literalType": {
              "$ref": "#/definitions/literal-type"
            }
          },
          "required": ["nodeType", "literalType"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/literal-string-content"
            },
            {
              "$ref": "#/definitions/literal-number-content"
            },
            {
              "$ref": "#/definitions/literal-integer-content"
            },
            {
              "$ref": "#/definitions/literal-boolean-content"
            },
            {
              "$ref": "#/definitions/literal-list-content"
            },
            {
              "$ref": "#/definitions/literal-xdmobject-content"
            },
            {
              "$ref": "#/definitions/literal-query-string-content"
            }
          ]
        }
      ]
    },
    "literal-string-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "String"
        },
        "value" : {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "literal-number-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Number"
        },
        "value" : {
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "literal-integer-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Integer"
        },
        "value" : {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "literal-boolean-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Boolean"
        },
        "value" : {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "literal-list-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "List"
        },
        "value" : {
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "literal-xdmobject-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "XDMObject"
        },
        "value" : {
          "type": "string",
          "format": "uri"
        }
      },
      "additionalProperties": false
    },
    "literal-query-string-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "QueryString"
        },
        "value" : {
          "type": "string"
        }
      },
      "additionalProperties": false
    },

    "select-expression-content": {
      "type": "object",
      "title": "Tree evaluation",
      "description": "Produce a list of elements from a list of (tree-structured) input values by evaluating each clause in order of declaration. All clauses must evaluate to true for the element referenced in the first clause to qualify",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "select"
            },
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tree-node-iterator-content"
              },
              "minItems": 1
            }
          },
          "required": ["nodeType", "variables"]
        }
      ]
    },
    "tree-node-iterator-content": {
      "type": "object",
      "title": "Tree node iterator",
      "description": "Produce a list of output values from a list of inputs by first applying an optional projection (from expression) and then a filter (where expression) to each value from the list of inputs. The list of values is bound to a variable name.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "varDecl"
            },
            "varName": {
              "type": "string",
              "pattern": "^[_A-Za-z0-9]+$"
            },
            "from": {
              "$ref": "#/definitions/node-content"
            },
            "where": {
              "$ref": "#/definitions/node-content"
            }
          },
          "required": ["nodeType", "varName", "from"]
        }
      ]
    },
    "tree-node-reference-content": {
      "type": "object",
      "title": "Reference to a value created in the context of a select expression evaluation",
      "description": "Produce a list of values by referencing a variable name that denotes a tree node element previously evaluated.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "varRef"
            },
            "varName": {
              "type": "string",
              "pattern": "^[_A-Za-z0-9]+$"
            }
          },
          "required": ["nodeType", "varName"]
        }
      ]
    },

    "function-content-model-instances": {
      "type": "object",
      "title": "Reference all instances of a given model",
      "description": "Reference the instances of a given model provided by the execution context. The function takes one or more arguments, the first argument must evaluate to a string that results in the model name to be accessed.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "fnApply"
            },
            "fnName": {
              "type": "string",
              "const": "modelInstances"
            },
            "params": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/node-content"
              },
              "minItems": 1
            }
          },
          "required": ["nodeType", "fnName", "params"],
          "additionalProperties": false
        }
      ]
    },

    "node-content": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "$ref": "#/definitions/node-type"
            }
          },
          "required": ["nodeType"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/function-application-content"
            },
            {
              "$ref": "#/definitions/function-creation-content"
            },
            {
              "$ref": "#/definitions/literal-content"
            },
            {
              "$ref": "#/definitions/field-lookup-content"
            },
            {
              "$ref": "#/definitions/select-expression-content"
            },
            {
              "$ref": "#/definitions/tree-node-iterator-content"
            },
            {
              "$ref": "#/definitions/tree-node-reference-content"
            }
          ]
        }
      ]
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/node-content"
    }
  ]
}