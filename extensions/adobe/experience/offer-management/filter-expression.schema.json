{
  "meta:license": [
    "Copyright 2018 Adobe Systems Incorporated. All rights reserved.",
    "This work is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license",
    "you may not use this file except in compliance with the License. You may obtain a copy",
    "of the License at https://creativecommons.org/licenses/by/4.0/"
  ],
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "https://ns.adobe.com/experience/offer-management/filter-expression",
  "meta:abstract": false,
  "meta:extensible": true,
  "type": "object",
  "title": "Filter Expression Tree",
  "description": "Represents an abstract syntax tree comprised of various node types. The expression is used to evaluate a match against a XDM object tree, where the result is a boolean value - matches: yes or no - or another XDM tree structure.",
  "definitions": {
    "node-type": {
      "type": "string",
      "title": "Node Type",
      "description": "Node Type: function application, literal, field lookup",
      "enum": [
        "fnApply",
        "literal",
        "fieldLookup"
      ],
      "meta:enum": {
        "fnApply": "Apply an n-ary function to the evaluation context",
        "literal": "Prodcue a value from a literal",
        "fieldLookup": "Produce a value from an object of fields"
      }
    },
    "function-type": {
      "type": "string",
      "title": "Function Identifier",
      "description": "Function Identifier: OR, AND, EQUALS",
      "enum": [
        "and",
        "or",
        "equals"
      ],
      "meta:enum": {
        "and": "An n-ary AND function. Map a list of boolean values to a single boolean value. Produces 'true' if and only if all input values are 'true', otherwise produces 'false'.",
        "or": "An n-ary OR function. Map a list of boolean values to a single boolean value. Produces 'true' if and only if any of the input values is 'true', otherwise produces 'false'.",
        "equals": "Produce a boolean value from two input values by comparing them, the second value is coerced to the type of the first value before applying the equals operator."
      }
    },
    "literal-type": {
      "type": "string",
      "title": "LIteral Type Identifier",
      "description": "LIteral Type Identifier: String, Number, Integer, Boolean, Date, DateTime",
      "enum": [
        "String",
        "Number",
        "Integer",
        "Boolean"
      ],
      "meta:enum": {
        "String": "",
        "Number": "",
        "Integer": "",
        "Boolean": ""
      }
    },
    "function-application-content": {
      "type": "object",
      "title": "N-ary function application",
      "description": "Apply an n-ary function (functor) that maps a value (scalar, object, list, tree) to anothe value, by recursively applying its child nodes to the objects and then taking the results as parameters to itself.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "ref": "#/definitions/node-type"
            },
            "fnName": {
              "ref": "#/definitions/function-type"
            }
          },
          "required": ["nodeType", "fnName"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/function-content-and"
            },
            {
              "$ref": "#/definitions/function-content-or"
            },
            {
              "$ref": "#/definitions/function-content-equals"
            }
          ]
       }
     ]
    },
    "function-content-and": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "and"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-or": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "or"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 1
        }
      },
      "additionalProperties": false
    },
    "function-content-equals": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "fnApply"
        },
        "fnName": {
          "type": "string",
          "const": "equals"
        },
        "params" : {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node-content"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "additionalProperties": false
    },
    "literal-content": {
      "type": "object",
      "title": "Literal",
      "description": "A literal produces the value that is stated in the 'value' property.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "literal"
            },
            "literalType": {
              "ref": "#/definitions/literal-type"
            }
          },
          "required": ["nodeType", "literalType"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/literal-string-content"
            },
            {
              "$ref": "#/definitions/literal-number-content"
            },
            {
              "$ref": "#/definitions/literal-integer-content"
            },
            {
              "$ref": "#/definitions/literal-boolean-content"
            }
          ]
        }
      ]
    },
    "literal-string-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "String"
        },
        "value" : {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "literal-number-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Number"
        },
        "value" : {
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "literal-integer-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Number"
        },
        "value" : {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "literal-boolean-content": {
      "properties": {
        "nodeType": {
          "type": "string",
          "const": "literal"
        },
        "literalType": {
          "type": "string",
          "const": "Boolean"
        },
        "value" : {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "field-lookup-content": {
      "type": "object",
      "title": "Field accessor",
      "description": "An epression that is applied on an object and returns the value of the field specified in the expression",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "type": "string",
              "const": "fieldLookup"
            },
            "fieldName": {
              "type": "string",
            },
            "object": {
              "$ref": "#/definitions/node-content",
            }
          },
          "required": ["nodeType", "fieldName"],
          "additionalProperties": false
        }
      ]
    },
    "node-content": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nodeType": {
              "ref": "#/definitions/node-type"
            }
          },
          "required": ["nodeType"]
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/function-application-content"
            },
            {
              "$ref": "#/definitions/literal-content"
            },
            {
              "$ref": "#/definitions/field-lookup-content"
            }
          ]
        }
      ]
    }    
  },
  "allOf": [
    {
      "$ref": "#/definitions/node-content"
    }
  ]
}
